{"version":3,"sources":["forms/AddLinkForm.js","forms/EditLinkForm.js","tables/LinkTable.js","youtubevideo.js","App.js","serviceWorker.js","index.js"],"names":["AddLinkForm","props","initialFormState","id","username","useState","user","setUser","onSubmit","event","preventDefault","addUser","type","name","value","onChange","target","EditLinkForm","currentUser","useEffect","updateUser","onClick","setEditing","className","LinkTable","users","length","map","key","editRow","deleteUser","colSpan","currentVideoId","YouTubeVideo","componentDidMount","window","YT","loadVideo","tag","document","createElement","src","onYouTubeIframeAPIReady","firstScriptTag","getElementsByTagName","parentNode","insertBefore","player","Player","events","onReady","onPlayerReady","onStateChange","onPlayerStateChange","videoIDs","loadVideoById","data","PlayerState","ENDED","render","React","PureComponent","App","setUsers","setCurrentUser","editing","usersIds","undefined","url","split","Object","values","updatedUser","filter","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQA6BeA,EA3BK,SAAAC,GACnB,IAAMC,EAAmB,CAAEC,GAAI,KAAMC,SAAU,IADnB,EAEFC,mBAASH,GAFP,mBAEpBI,EAFoB,KAEdC,EAFc,KAU5B,OACC,0BACCC,SAAU,SAAAC,GACTA,EAAMC,iBACDJ,EAAKF,WAEVH,EAAMU,QAAQL,GACdC,EAAQL,MAGT,qDACA,2BAAOU,KAAK,OAAOC,KAAK,WAAWC,MAAOR,EAAKF,SAAUW,SAjBjC,SAAAN,GAAU,IAAD,EACVA,EAAMO,OAAtBH,EAD0B,EAC1BA,KAAMC,EADoB,EACpBA,MAEdP,EAAQ,eAAKD,EAAN,eAAaO,EAAOC,QAe1B,kDCaYG,EAnCM,SAAAhB,GAAU,IAAD,EACFI,mBAASJ,EAAMiB,aADb,mBACpBZ,EADoB,KACdC,EADc,KAG5BY,qBACE,WACEZ,EAAQN,EAAMiB,eAEhB,CAAEjB,IAUJ,OACE,0BACEO,SAAU,SAAAC,GACRA,EAAMC,iBAENT,EAAMmB,WAAWd,EAAKH,GAAIG,KAG5B,uCACA,2BAAOM,KAAK,OAAOC,KAAK,WAAWC,MAAOR,EAAKF,SAAUW,SAfnC,SAAAN,GAAU,IAAD,EACTA,EAAMO,OAAtBH,EADyB,EACzBA,KAAMC,EADmB,EACnBA,MAEdP,EAAQ,eAAKD,EAAN,eAAaO,EAAOC,QAazB,+CACA,4BAAQO,QAAS,kBAAMpB,EAAMqB,YAAW,IAAQC,UAAU,uBAA1D,YCeSC,EA3CG,SAAAvB,GAAK,OACrB,+BACE,+BACE,4BAEE,oCACA,yCAGJ,+BACE,4BACCA,EAAMwB,MAAMC,OAAS,EACpBzB,EAAMwB,MAAME,KAAI,SAAArB,GAAI,OAClB,wBAAIsB,IAAKtB,EAAKH,IAEZ,4BAAKG,EAAKF,UACV,4BACE,4BACEiB,QAAS,WACPpB,EAAM4B,QAAQvB,IAEhBiB,UAAU,uBAJZ,QAQA,4BACEF,QAAS,kBAAMpB,EAAM6B,WAAWxB,EAAKH,KACrCoB,UAAU,uBAFZ,eAUN,4BACE,wBAAIQ,QAAS,GAAb,gB,6BCjCNC,EAAiB,EAgENC,E,2MA3DbC,kBAAoB,WAGlB,GAAKC,OAAOC,GAWV,EAAKC,gBAXS,CACd,IAAMC,EAAMC,SAASC,cAAc,UACnCF,EAAIG,IAAM,qCAGVN,OAAOO,wBAA0B,EAAKL,UAEtC,IAAMM,EAAiBJ,SAASK,qBAAqB,UAAU,GAC/DD,EAAeE,WAAWC,aAAaR,EAAKK,K,EAOhDN,UAAY,WAIV,EAAKU,OAAS,IAAIZ,OAAOC,GAAGY,OAAd,iBAAuC,CAEnDC,OAAQ,CACNC,QAAS,EAAKC,cACbC,cAAe,EAAKC,wB,EAK3BF,cAAgB,SAAA1C,GAAU,IAChB6C,EAAY,EAAKrD,MAAjBqD,SACR7C,EAAMO,OAAOuC,cAAcD,EAAStB,K,EAEtCqB,oBAAsB,SAAA5C,GAAU,IACtB6C,EAAY,EAAKrD,MAAjBqD,SAEJ7C,EAAM+C,MAAQrB,OAAOC,GAAGqB,YAAYC,SACxC1B,EACqBsB,EAAS5B,QAC5B,EAAKqB,OAAOQ,cAAcD,EAAStB,K,EAKvC2B,OAAS,WAGP,OACE,6BACE,yBAAKxD,GAAE,qB,6BAvDYyD,IAAMC,eCgFlBC,EAhFH,WAEX,IAFiB,EAYWzD,mBAVV,CAEjB,CAAEF,GAAI,EAAIC,SAAU,gEACpB,CAAED,GAAI,EAAGC,SAAU,+CACnB,CAAED,GAAI,EAAGC,SAAU,kCANH,mBAYTqB,EAZS,KAYFsC,EAZE,OAauB1D,mBAJf,CAAEF,GAAI,KAAOC,SAAU,KAT/B,mBAaTc,EAbS,KAaI8C,EAbJ,OAce3D,oBAAS,GAdxB,mBAcT4D,EAdS,KAcA3C,EAdA,KA2CjB,IAAM4C,EAAWzC,EAAME,KAAI,SAAArB,GAAI,YAFX6D,KADnBC,GADqBA,EAI0B9D,EAAKF,UAH1CiE,MAAM,0CACJ,GAAoBD,EAAI,GAAGC,MAAM,iBAAiB,GAAKD,EAAI,GAFxE,IAAsBA,KAOhBd,EAFIgB,OAAOC,OAAOL,GAIxB,OACC,yBAAK3C,UAAU,aACd,mDACA,kBAAC,EAAD,CAAcE,MAAOA,EAAO6B,SAAUA,IACtC,yBAAK/B,UAAU,YACd,yBAAKA,UAAU,cACb0C,EACA,kBAAC,WAAD,KACC,yCACA,kBAAC,EAAD,CACCA,QAASA,EACT3C,WAAYA,EACZJ,YAAaA,EACbE,WAjCY,SAACjB,EAAIqE,GACvBlD,GAAW,GAEXyC,EAAStC,EAAME,KAAI,SAAArB,GAAI,OAAKA,EAAKH,KAAOA,EAAKqE,EAAclE,UAkCvD,kBAAC,WAAD,KACC,yCACA,kBAAC,EAAD,CAAaK,QAlDH,SAAAL,GACfA,EAAKH,GAAKsB,EAAMC,OAAS,EACzBqC,EAAS,GAAD,mBAAMtC,GAAN,CAAanB,UAoDnB,yBAAKiB,UAAU,cACd,0CACA,kBAAC,EAAD,CAAWE,MAAOA,EAAOI,QAvCb,SAAAvB,GACfgB,GAAW,GAEX0C,EAAe,CAAE7D,GAAIG,EAAKH,GAAKC,SAAUE,EAAKF,YAoCA0B,WAnD5B,SAAA3B,GAClBmB,GAAW,GAEXyC,EAAStC,EAAMgD,QAAO,SAAAnE,GAAI,OAAIA,EAAKH,KAAOA,aCnBxBuE,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MACvB,2DCZNC,IAASnB,OAAO,kBAAC,EAAD,MAASpB,SAASwC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0dd1467f.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst AddLinkForm = props => {\n\tconst initialFormState = { id: null, username: '' }\n\tconst [ user, setUser ] = useState(initialFormState)\n\n\tconst handleInputChange = event => {\n\t\tconst { name, value } = event.target\n\n\t\tsetUser({ ...user, [name]: value })\n\t}\n\n\treturn (\n\t\t<form\n\t\t\tonSubmit={event => {\n\t\t\t\tevent.preventDefault()\n\t\t\t\tif (!user.username) return\n\n\t\t\t\tprops.addUser(user)\n\t\t\t\tsetUser(initialFormState)\n\t\t\t}}\n\t\t>\n\t\t\t<label>Link(Youtube only)</label>\n\t\t\t<input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n\t\t\t<button>Add new link</button>\n\t\t</form>\n\t)\n}\n\nexport default AddLinkForm\n","import React, { useState, useEffect } from 'react'\n\nconst EditLinkForm = props => {\n  const [ user, setUser ] = useState(props.currentUser)\n\n  useEffect(\n    () => {\n      setUser(props.currentUser)\n    },\n    [ props ]\n  )\n  // You can tell React to skip applying an effect if certain values havenâ€™t changed between re-renders. [ props ]\n\n  const handleInputChange = event => {\n    const { name, value } = event.target\n\n    setUser({ ...user, [name]: value })\n  }\n\n  return (\n    <form\n      onSubmit={event => {\n        event.preventDefault()\n\n        props.updateUser(user.id, user)\n      }}\n    >\n      <label>Link</label>\n      <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n      <button>Update link</button>\n      <button onClick={() => props.setEditing(false)} className=\"button muted-button\">\n        Cancel\n      </button>\n    </form>\n  )\n}\n\nexport default EditLinkForm\n","import React from 'react'\n\nconst LinkTable = props => (\n  <table>\n    <thead>\n      <tr>\n        \n        <th>Link</th>\n        <th>Actions</th>\n      </tr>\n    </thead>\n    <tbody>\n      <p></p>\n      {props.users.length > 0 ? (\n        props.users.map(user => (\n          <tr key={user.id}>\n            \n            <td>{user.username}</td>\n            <td>\n              <button\n                onClick={() => {\n                  props.editRow(user)\n                }}\n                className=\"button muted-button\"\n              >\n                Edit\n              </button>\n              <button\n                onClick={() => props.deleteUser(user.id)}\n                className=\"button muted-button\"\n              >\n                Delete\n              </button>\n            </td>\n          </tr>\n        ))\n      ) : (\n        <tr>\n          <td colSpan={3}>No Links</td>\n        </tr>\n      )}\n    </tbody>\n  </table>\n)\n\nexport default LinkTable\n","\nimport React from 'react';\n//version 1\n\n\nvar currentVideoId = 0;\nclass YouTubeVideo extends React.PureComponent {\n  \n  \n\n  componentDidMount = () => {\n    // On mount, check to see if the API script is already loaded\n\n    if (!window.YT) { // If not, load the script asynchronously\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n\n      // onYouTubeIframeAPIReady will load the video after the script is loaded\n      window.onYouTubeIframeAPIReady = this.loadVideo;\n\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n    } else { // If script is already there, load the video directly\n      this.loadVideo();\n    }\n  };\n\n  loadVideo = () => {\n   // const { id } = this.props;\n\n    // the Player object is created uniquely based on the id in props\n    this.player = new window.YT.Player(`youtube-player`, {\n      \n      events: {\n        onReady: this.onPlayerReady,\n         onStateChange: this.onPlayerStateChange\n      },\n    });\n  };\n\n  onPlayerReady = event => {\n    const { videoIDs} = this.props;\n    event.target.loadVideoById(videoIDs[currentVideoId]);\n  };\n  onPlayerStateChange = event => { \n    const { videoIDs} = this.props;\n    // eslint-disable-next-line\n    if (event.data == window.YT.PlayerState.ENDED) {\n    currentVideoId++;\n    if (currentVideoId < videoIDs.length) {\n      this.player.loadVideoById(videoIDs[currentVideoId]);\n    }\n  }\n  };\n\n  render = () => {\n  // const { videoIDs} = this.props;\n   \n    return (\n      <div >\n        <div id={`youtube-player`}  />\n        \n        \n      </div>\n    );\n  };\n}\n\nexport default YouTubeVideo;\n","import React, { useState, Fragment } from 'react'\nimport AddLinkForm from './forms/AddLinkForm'\nimport EditLinkForm from './forms/EditLinkForm'\nimport LinkTable from './tables/LinkTable'\n\nimport YouTubeVideo from \"./youtubevideo\";\nconst App = () => {\n\t// Data\n\tconst usersData = [\n  \n\t\t{ id: 1,  username: 'https://www.youtube.com/watch?v=kJQP7kiw5Fk&feature=youtu.be' },\n\t\t{ id: 2, username: 'https://www.youtube.com/watch?v=ClU3fctbGls' },\n\t\t{ id: 3, username: 'https://youtu.be/CwfoyVa980U' },\n\t]\n\n\tconst initialFormState = { id: null,  username: '' }\n\n\t// Setting state\n\tconst [ users, setUsers ] = useState(usersData)\n\tconst [ currentUser, setCurrentUser ] = useState(initialFormState)\n\tconst [ editing, setEditing ] = useState(false)\n\n\t// CRUD operations\n\tconst addUser = user => {\n\t\tuser.id = users.length + 1\n\t\tsetUsers([ ...users, user ])\n\t}\n\n\tconst deleteUser = id => {\n\t\tsetEditing(false)\n\n\t\tsetUsers(users.filter(user => user.id !== id))\n\t}\n\n\tconst updateUser = (id, updatedUser) => {\n\t\tsetEditing(false)\n\n\t\tsetUsers(users.map(user => (user.id === id ? updatedUser : user)))\n\t}\n\n\tconst editRow = user => {\n\t\tsetEditing(true)\n\n\t\tsetCurrentUser({ id: user.id,  username: user.username })\n\t}\n\tfunction YouTubeGetID(url){\n\t\turl = url.split(/(vi\\/|v=|\\/v\\/|youtu\\.be\\/|\\/embed\\/)/);// eslint-disable-next-line\n\t\treturn (url[2] !== undefined) ? url[2].split(/[^0-9a-z_\\-]/i)[0] : url[0];\n\t}\n\tconst usersIds = users.map(user => YouTubeGetID(user.username));\n   const a=Object.values(usersIds);\n   \n\tconst videoIDs =a;\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<h1>Youtube Link player</h1>\n\t\t\t<YouTubeVideo users={users} videoIDs={videoIDs} />\n\t\t\t<div className=\"flex-row\">\n\t\t\t\t<div className=\"flex-large\">\n\t\t\t\t\t{editing ? (\n\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t<h2>Edit link</h2>\n\t\t\t\t\t\t\t<EditLinkForm\n\t\t\t\t\t\t\t\tediting={editing}\n\t\t\t\t\t\t\t\tsetEditing={setEditing}\n\t\t\t\t\t\t\t\tcurrentUser={currentUser}\n\t\t\t\t\t\t\t\tupdateUser={updateUser}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t<h2>Add links</h2>\n\t\t\t\t\t\t\t<AddLinkForm addUser={addUser} />\n\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"flex-large\">\n\t\t\t\t\t<h2>View links</h2>\n\t\t\t\t\t<LinkTable users={users} editRow={editRow} deleteUser={deleteUser} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}